diff --git a/src/drivers/uavcan/CMakeLists.txt b/src/drivers/uavcan/CMakeLists.txt
index e13ffb597e..dfcded0d31 100644
--- a/src/drivers/uavcan/CMakeLists.txt
+++ b/src/drivers/uavcan/CMakeLists.txt
@@ -116,6 +116,7 @@ px4_add_module(
 		sensors/baro.cpp
 		sensors/flow.cpp
 		sensors/battery.cpp
+		sensors/rangefinder.cpp
 
 	DEPENDS
 		px4_uavcan_dsdlc
diff --git a/src/drivers/uavcan/libuavcan b/src/drivers/uavcan/libuavcan
--- a/src/drivers/uavcan/libuavcan
+++ b/src/drivers/uavcan/libuavcan
@@ -1 +1 @@
-Subproject commit 6174b8c10a2dbf47076ca7a7b5820a4c36c8a988
+Subproject commit 6174b8c10a2dbf47076ca7a7b5820a4c36c8a988-dirty
diff --git a/src/drivers/uavcan/sensors/rangefinder.cpp b/src/drivers/uavcan/sensors/rangefinder.cpp
new file mode 100644
index 0000000000..24ff6dfe9f
--- /dev/null
+++ b/src/drivers/uavcan/sensors/rangefinder.cpp
@@ -0,0 +1,117 @@
+/****************************************************************************
+ *
+ *   Copyright (c) 2020 PX4 Development Team. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ * 3. Neither the name PX4 nor the names of its contributors may be
+ *    used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ ****************************************************************************/
+
+/**
+ * @author RJ Gritter <rjgritter657@gmail.com>
+ */
+
+#include <drivers/drv_hrt.h>
+#include <parameters/param.h>
+#include "rangefinder.hpp"
+#include <math.h>
+
+const char *const UavcanRangefinderBridge::NAME = "rangefinder";
+
+UavcanRangefinderBridge::UavcanRangefinderBridge(uavcan::INode &node) :
+	UavcanCDevSensorBridgeBase("uavcan_rangefinder", "/dev/uavcan/rangefinder", RANGE_FINDER_BASE_DEVICE_PATH,
+				   ORB_ID(distance_sensor)),
+	_sub_range_data(node)
+{ }
+
+int UavcanRangefinderBridge::init()
+{
+	int res = device::CDev::init();
+
+	if (res < 0) {
+		return res;
+	}
+
+	// Initialize min/max range from params
+	param_get(param_find("UAVCAN_RNG_MIN"), &_range_min_m);
+	param_get(param_find("UAVCAN_RNG_MAX"), &_range_max_m);
+
+	res = _sub_range_data.start(RangeCbBinder(this, &UavcanRangefinderBridge::range_sub_cb));
+
+	if (res < 0) {
+		DEVICE_LOG("failed to start uavcan sub: %d", res);
+		return res;
+	}
+
+	return 0;
+}
+
+void
+UavcanRangefinderBridge::range_sub_cb(const
+				      uavcan::ReceivedDataStructure<uavcan::equipment::range_sensor::Measurement> &msg)
+{
+	distance_sensor_s report{};
+
+	/*
+	 * FIXME HACK
+	 * This code used to rely on msg.getMonotonicTimestamp().toUSec() instead of HRT.
+	 * It stopped working when the time sync feature has been introduced, because it caused libuavcan
+	 * to use an independent time source (based on hardware TIM5) instead of HRT.
+	 * The proper solution is to be developed.
+	 */
+	report.timestamp   		= hrt_absolute_time();
+	report.current_distance   	= msg.range;
+	report.orientation		= distance_sensor_s::ROTATION_DOWNWARD_FACING;
+	report.h_fov			= msg.field_of_view;
+	report.v_fov			= msg.field_of_view;
+
+	report.min_distance 		= _range_min_m;
+	report.max_distance 		= _range_max_m;
+
+	report.variance   		= 0.0f;	// Unknown
+	report.signal_quality		= -1;
+
+	switch (msg.sensor_type) {
+	case 0:	// Undefined - Assume laser
+		report.type = distance_sensor_s::MAV_DISTANCE_SENSOR_LASER;
+		break;
+
+	case 1:	// Sonar
+		report.type = distance_sensor_s::MAV_DISTANCE_SENSOR_ULTRASOUND;
+		break;
+
+	case 2:	// Lidar
+		report.type = distance_sensor_s::MAV_DISTANCE_SENSOR_LASER;
+		break;
+
+	case 3:	// Radar
+		report.type = distance_sensor_s::MAV_DISTANCE_SENSOR_RADAR;
+		break;
+	}
+
+	publish(msg.getSrcNodeID().get(), &report);
+}
diff --git a/src/drivers/uavcan/sensors/rangefinder.hpp b/src/drivers/uavcan/sensors/rangefinder.hpp
new file mode 100644
index 0000000000..7154846371
--- /dev/null
+++ b/src/drivers/uavcan/sensors/rangefinder.hpp
@@ -0,0 +1,72 @@
+/****************************************************************************
+ *
+ *   Copyright (c) 2020 PX4 Development Team. All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ *
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in
+ *    the documentation and/or other materials provided with the
+ *    distribution.
+ * 3. Neither the name PX4 nor the names of its contributors may be
+ *    used to endorse or promote products derived from this software
+ *    without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
+ * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
+ * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+ * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
+ * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
+ * OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+ * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+ * POSSIBILITY OF SUCH DAMAGE.
+ *
+ ****************************************************************************/
+
+/**
+ * @author RJ Gritter <rjgritter657@gmail.com>
+ */
+
+#pragma once
+
+#include "sensor_bridge.hpp"
+#include <drivers/drv_range_finder.h>
+#include <uORB/topics/distance_sensor.h>
+
+#include <uavcan/equipment/range_sensor/Measurement.hpp>
+
+class UavcanRangefinderBridge : public UavcanCDevSensorBridgeBase
+{
+public:
+	static const char *const NAME;
+
+	UavcanRangefinderBridge(uavcan::INode &node);
+
+	const char *get_name() const override { return NAME; }
+
+	int init() override;
+
+private:
+
+	void range_sub_cb(const uavcan::ReceivedDataStructure<uavcan::equipment::range_sensor::Measurement> &msg);
+
+	typedef uavcan::MethodBinder < UavcanRangefinderBridge *,
+		void (UavcanRangefinderBridge::*)
+		(const uavcan::ReceivedDataStructure<uavcan::equipment::range_sensor::Measurement> &) >
+		RangeCbBinder;
+
+	uavcan::Subscriber<uavcan::equipment::range_sensor::Measurement, RangeCbBinder> _sub_range_data;
+
+	float _range_min_m{0.0f};
+	float _range_max_m{0.0f};
+
+
+};
diff --git a/src/drivers/uavcan/sensors/sensor_bridge.cpp b/src/drivers/uavcan/sensors/sensor_bridge.cpp
index bdb0a42bd9..580dafa278 100644
--- a/src/drivers/uavcan/sensors/sensor_bridge.cpp
+++ b/src/drivers/uavcan/sensors/sensor_bridge.cpp
@@ -43,6 +43,7 @@
 #include "baro.hpp"
 #include "flow.hpp"
 #include "battery.hpp"
+#include "rangefinder.hpp"
 
 /*
  * IUavcanSensorBridge
@@ -54,6 +55,7 @@ void IUavcanSensorBridge::make_all(uavcan::INode &node, List<IUavcanSensorBridge
 	list.add(new UavcanGnssBridge(node));
 	list.add(new UavcanFlowBridge(node));
 	list.add(new UavcanBatteryBridge(node));
+	list.add(new UavcanRangefinderBridge(node));
 }
 
 /*
diff --git a/src/drivers/uavcan/uavcan_params.c b/src/drivers/uavcan/uavcan_params.c
index 4b9f622b32..add59a1697 100644
--- a/src/drivers/uavcan/uavcan_params.c
+++ b/src/drivers/uavcan/uavcan_params.c
@@ -88,3 +88,23 @@ PARAM_DEFINE_INT32(UAVCAN_BITRATE, 1000000);
  * @group UAVCAN
  */
 PARAM_DEFINE_INT32(UAVCAN_ESC_IDLT, 1);
+
+/**
+ * UAVCAN rangefinder minimum range
+ *
+ * This parameter defines the minimum valid range for a rangefinder connected via UAVCAN.
+ *
+ * @unit m
+ * @group UAVCAN
+ */
+PARAM_DEFINE_FLOAT(UAVCAN_RNG_MIN, 0.3f);
+
+/**
+ * UAVCAN rangefinder maximum range
+ *
+ * This parameter defines the maximum valid range for a rangefinder connected via UAVCAN.
+ *
+ * @unit m
+ * @group UAVCAN
+ */
+PARAM_DEFINE_FLOAT(UAVCAN_RNG_MAX, 200.0f);
